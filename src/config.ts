import { networkInterfaces } from 'os';

import { hash } from './lib/hash';

const nets = Object.values(networkInterfaces()).flatMap((net) => net);

const net = nets
	.map((net) => net && net.family === 'IPv4' && !net.internal && net.address)
	.filter(Boolean)[0];

const {
	// HOW_MANY = '100',
	IGNORE_ROOMS = 'GENERAL',
	HOW_MANY_USERS = '10',
	USERS_PER_ROOM = '10',
	LOGIN_BATCH = '5',
	USERS_EMAIL = '@domain.com',
	SUBSCRIPTION_ID = 'sib-__rid__-__uid__',
	ROOM_ID = 'rid-__prefix__-__count__',
	USER_ID = 'uid-__prefix__-__count__',
	TASK_ID,
	DATABASE_URL = '', // 'mongodb://localhost:27017';
	DATABASE_NAME = 'rocketchat',
	MESSAGES_PER_SECOND = '10',
	MESSAGE_SENDING_RATE = '0.00115428571', // ='0.001428571,

	SET_STATUS_PER_SECOND = '0',
	SET_STATUS_RATE = '0.000115428571',

	REGISTER_PER_SECOND = '0',
	REGISTER_RATE = '0.000115428571',

	OPEN_ROOM_PER_SECOND = '0',
	OPEN_ROOM_RATE = '0.000115428571',

	READ_MESSAGE_PER_SECOND = '0',
	READ_MESSAGE_RATE = '0.000115428571',

	SUBSCRIBE_PRESENCE_PER_SECOND = '0',
	SUBSCRIBE_PRESENCE_RATE = '0.00115428571',

	INITIAL_SUBSCRIBE_RATIO = '0.02',
	INITIAL_SUBSCRIBE_MIN = '4',

	CLUSTER_GROUP = 'loadtester',
	MESSAGE = 'hello',

	ROUTING_CONFIG_PER_SEC = '10',
	QUEUED_INQUIRIES_PER_SEC = '0.5',
	TAKE_INQUIRY_PER_SEC = '1',

	DYNAMIC_LOGIN = 'false',
} = process.env;

export const config = {
	// HOW_MANY,
	HOW_MANY_USERS: parseInt(HOW_MANY_USERS),
	USERS_PER_ROOM,
	DATABASE_URL,
	DATABASE_NAME,
	USERS_EMAIL,
	LOGIN_BATCH: parseInt(LOGIN_BATCH),
	hash: hash({
		HOW_MANY_USERS,
		USERS_PER_ROOM,
		USERS_EMAIL,
		SUBSCRIPTION_ID,
		ROOM_ID,
		USER_ID,
		TASK_ID: String(TASK_ID || net || '1'),
		CLUSTER_GROUP,
		version: '1.0.0',
	}),
	MESSAGE,
	SUBSCRIPTION_ID,
	ROOM_ID,
	USER_ID,
	TASK_ID: String(TASK_ID || net || '1'),
	CLUSTER_GROUP,
	IGNORE_ROOMS: IGNORE_ROOMS.split(','),

	INITIAL_SUBSCRIBE_RATIO: parseFloat(INITIAL_SUBSCRIBE_RATIO),
	INITIAL_SUBSCRIBE_MIN: parseInt(INITIAL_SUBSCRIBE_MIN),

	MESSAGES_PER_SECOND: MESSAGE_SENDING_RATE
		? parseInt(HOW_MANY_USERS) * parseFloat(MESSAGE_SENDING_RATE)
		: parseInt(MESSAGES_PER_SECOND),

	SET_STATUS_PER_SECOND: SET_STATUS_RATE
		? parseInt(HOW_MANY_USERS) * parseFloat(SET_STATUS_RATE)
		: parseInt(SET_STATUS_PER_SECOND),

	REGISTER_PER_SECOND: REGISTER_RATE
		? parseInt(HOW_MANY_USERS) * parseFloat(REGISTER_RATE)
		: parseInt(REGISTER_PER_SECOND),

	OPEN_ROOM_PER_SECOND: OPEN_ROOM_RATE
		? parseInt(HOW_MANY_USERS) * parseFloat(OPEN_ROOM_RATE)
		: parseInt(OPEN_ROOM_PER_SECOND),

	READ_MESSAGE_PER_SECOND: READ_MESSAGE_RATE
		? parseInt(HOW_MANY_USERS) * parseFloat(READ_MESSAGE_RATE)
		: parseInt(READ_MESSAGE_PER_SECOND),

	SUBSCRIBE_PRESENCE_PER_SECOND: SUBSCRIBE_PRESENCE_RATE
		? parseInt(HOW_MANY_USERS) * parseFloat(SUBSCRIBE_PRESENCE_RATE)
		: parseInt(SUBSCRIBE_PRESENCE_PER_SECOND),

	ROUTING_CONFIG_PER_SEC: parseInt(ROUTING_CONFIG_PER_SEC),
	QUEUED_INQUIRIES_PER_SEC: parseFloat(QUEUED_INQUIRIES_PER_SEC),
	TAKE_INQUIRY_PER_SEC: parseInt(TAKE_INQUIRY_PER_SEC),

	DYNAMIC_LOGIN: ['true', 'yes'].includes(DYNAMIC_LOGIN),
};
